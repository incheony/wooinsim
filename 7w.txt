class DNode: 
    def __init__(self, data): 
        self.data = data
        self.prev = None
        self.next = None

    def __str__(self):
        return str(self.data)

class DoublyLinkedDeque:
    def __init__(self):
        self.front = None
        self.rear = None

    def isEmpty(self):
        #if self.front == self.rear:
        if self.front == None and self.rear == None:
            return True
        else:
            return False    
    
    def print_deque(self):
        node = self.front
        print_dq = ''
        while True:
            print_dq += str(node)
            if node == self.rear:
                break
            try: 
                node = node.next 
            except: 
                break
            print_dq += ' '
        return print_dq

    def add_front(self, data):
        new_node = DNode(data)
        if self.isEmpty():
            self.front = new_node
            self.front.next = self.rear
            self.rear = new_node
            self.rear.prev = self.front
        else:
            self.front.prev = new_node
            new_node.next = self.front
            self.front = new_node

    def add_rear(self, data):
        new_node = DNode(data)
        if self.isEmpty():
            self.rear = new_node
            self.rear.prev = self.front
            self.front = new_node
            self.front.next = self.rear
        else:
            self.rear.next = new_node
            new_node.prev = self.rear
            self.rear = new_node

    def delete_front(self):
        if not self.isEmpty():
            data = self.front.data
            self.front = self.front.next
            if self.front==None:
                self.rear = None
            else:
                self.front.prev = None
            return data
        else:
            print('underflow')
            return sys.exit()
        
    def delete_rear(self):
        if not self.isEmpty():
            data = self.rear.data
            self.rear = self.rear.prev
            if self.rear==None:
                self.front = None
            else:
                self.rear.next = None
            return data
        else:
            print('underflow')
            return sys.exit()




dq = DoublyLinkedDeque()
n = int(input())

for i in range(n):
    command = input().split(' ')
    if (command[0] == 'AF'):
        dq.add_front(command[1])
    elif (command[0] == 'AR'):
        dq.add_rear(command[1])
    elif (command[0] == 'DF'):
        dq.delete_front()
    elif (command[0] == 'DR'):
        dq.delete_rear()
    elif (command[0] == 'P'):
        print(dq.print_deque())    